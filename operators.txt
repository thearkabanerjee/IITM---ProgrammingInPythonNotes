arithmetic operators in python:

addition --> +
subtraction --> -
multiplication --> * 
division --> /

floor division --> // (returns only the integer part of the quotient)

Modulus (Remainder) --> % 

Exponent --> ** 



Relational Operators: 

greater than --> >
less than --> <
equal to --> ==
greater than equal to --> >=
less than or equal to --> <=
not equal to --> != (also just ! =) 


Logical Operators:

and --> both have to be True in order to be printed True or they will print False
Examples: print (True and True) #output will be True (since both are True)
	  print (True and False) # output will be False (since both are not True)
	  print (False and True) # output will be False (since both are not True, again)
	  print (False and False) # output will be False (sine both are False)

or --> either of them have to be True or both have to be True to make the output True or it will be False.
Examples: print (True or False ) # output will be True because it has True
	  print (True or True) # output will be True (obvious reasons)
	  print (False or False) # output == False (obvious reasons)


not --> just prints the opposite of what is written.
Examples: print (not(True))  # output will be False
	  print (not(False))  #output == True (Same thing the other way around)


String Concatination:

v1 = "Coffee"
v2 = "Bread"

print (v1+v2) # output will be "CoffeeBread"
print (v1[0]) # output will be "C"

print (v1[1:4]) # output will be "off" (note not the 4th one) # called String Slicing

s = "hi"
print (s*5)
# output --> "hihihihihi"


a = "India"
print (a =="India")  # True is returned
print (a == "india") # False is returned

print ("hello" > "arka") # False is returned
(compares letter by letter the one with the more alphabet number gets to be higher)

print ("hello" > "hellp") # False will be returned. Also more characters if the first few characters are similar will make the one with more characters greater.

Length:- (len function)
a = "hello"
print (len(a))  # 5 (which is the number of characters in the word "hello")

# Dynamic Typing:
In Python one can just change types 

a = "hello"
print (a)  # a is printed as "hello"
print (type(a))  # the type of a is string

a = 10
print (a) # instantly the value of a changes from "hello" to 10
print (type(a)) # the type of a changed from string to integer now.

this change in data type in a variable is called dynamic typing. in langauges like c or something like TypeScript, one cannot do this cz they are not loosely typed.


RESERVED KEYWORDS IN PYTHON:
and = "hello"
print (and)

# python won't be able to do it cz 'and' is already a function in python and so a reserved keywords 

variable names are case-sensitive (Arka and arka are definately different)


swaping variables values:
a= 10
b= 20
print (a) # will output a == 10
print (b) # will output b == 20
a,b = b,a # SWAPS THE VARIABLES
print (a) # will output a == 20
print (b) # will output b == 10

deleting a variable

a = 12
print (a) # will output 12
del a # the memory space is freed and the variable a stored will be deleted
print (a)  # error

in operator:
just prints out True or False if the word/ character is there.

print ("hello" in "arka in hello world")
# returns True since hello is in the sentence

print ("hello" in "arka in wohooo world")
# returns False since hello is not in the sentence.
